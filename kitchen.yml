# NOTE: This test-kitchen file contains ERB code to cut-down on boilerplate;
# YAML linters will complain!
# yamllint disable
<%
require 'open3'
require 'json'

# Fall back to current time and known location for report files if not present
# in ENV
report_dir = ENV['REPORT_DIR'] || 'test/reports'
report_ts = ENV['REPORT_TS'] || Time.now.strftime('%Y-%m-%d-%H-%M-%S')

# Parse the outputs of the test harness
tf_output, rc = Open3.capture2('terraform -chdir=test/setup output -json')
if rc != 0
  abort 'Failed to capture Terraform output from test/setup'
end
harness_outputs = JSON.parse(tf_output).map { |k,v| [k, v['value']] }.to_h
%>
---
driver:
  name: terraform
  command_timeout: 60
  verify_version: true
  variables:
    prefix: <%= harness_outputs['prefix'] %>
    project_id: <%= harness_outputs['project_id'] %>

provisioner:
  name: terraform

verifier:
  name: terraform
  color: true

platforms:
  - name: local

suites:
  # - name: root-minimal
  #   driver:
  #     root_module_directory: test/fixtures/root
  #     variables:
  #       test_name: root-minimal
  #   verifier:
  #     systems:
  #       - name: secrets
  #         backend: gcp
  #         profile_locations:
  #           - test/profiles/secrets
  #         reporter:
  #           - cli
  #           - documentation:<%= report_dir %>/<%= report_ts %>/root-minimal.txt
  #           - junit2:<%= report_dir %>/<%= report_ts %>/root-minimal.xml
  #           - yaml:<%= report_dir %>/<%= report_ts %>/root-minimal.yaml
  - name: example-accessors
    driver:
      root_module_directory: test/fixtures/examples/accessors
      variables:
        test_name: example-accessors
        accessors: '[\"serviceAccount:<%= harness_outputs['service_account_email'] %>\"]'
        secret: terribleS3cr3t
    verifier:
      systems:
        - name: secrets
          backend: gcp
          profile_locations:
            - test/profiles/secrets
          reporter:
            - cli
            - documentation:<%= report_dir %>/<%= report_ts %>/example-accessors.txt
            - junit2:<%= report_dir %>/<%= report_ts %>/example-accessors.xml
            - yaml:<%= report_dir %>/<%= report_ts %>/example-accessors.yaml
  - name: example-all-options
    driver:
      root_module_directory: test/fixtures/examples/all-options
      variables:
        test_name: example-all-options
        accessors: '[\"serviceAccount:<%= harness_outputs['service_account_email'] %>\"]'
        labels: '{<%= harness_outputs['labels'].to_a.map{|pair| sprintf('%s=\"%s\"', pair[0], pair[1])}.join(',') %>}'
        replication_locations: '<%= harness_outputs['replication_locations'].to_s.gsub('"', '\"') %>'
        replication_keys: '{<%= harness_outputs['replication_keys'].except('global').to_a.map{|pair| sprintf('%s=\"%s\"', pair[0], pair[1])}.join(',') %>}'
        secret: terribleS3cr3t
    verifier:
      systems:
        - name: secrets
          backend: gcp
          profile_locations:
            - test/profiles/secrets
          reporter:
            - cli
            - documentation:<%= report_dir %>/<%= report_ts %>/example-all-options.txt
            - junit2:<%= report_dir %>/<%= report_ts %>/example-all-options.xml
            - yaml:<%= report_dir %>/<%= report_ts %>/example-all-options.yaml
  - name: example-simple
    driver:
      root_module_directory: test/fixtures/examples/simple
      variables:
        test_name: example-simple
        secret: terribleS3cr3t
    verifier:
      systems:
        - name: secrets
          backend: gcp
          profile_locations:
            - test/profiles/secrets
          reporter:
            - cli
            - documentation:<%= report_dir %>/<%= report_ts %>/example-simple.txt
            - junit2:<%= report_dir %>/<%= report_ts %>/example-simple.xml
            - yaml:<%= report_dir %>/<%= report_ts %>/example-simple.yaml
  # Disabled - need to use -target to instantiate correctly
  # - name: example-with-random-provider
  #   driver:
  #     root_module_directory: test/fixtures/examples/with-random-provider
  #     variables:
  #       test_name: example-with-random-provider
  #   verifier:
  #     systems:
  #       - name: secrets
  #         backend: gcp
  #         profile_locations:
  #           - test/profiles/secrets
  #         reporter:
  #           - cli
  #           - documentation:<%= report_dir %>/<%= report_ts %>/example-with-random-provider.txt
  #           - junit2:<%= report_dir %>/<%= report_ts %>/example-with-random-provider.xml
  #           - yaml:<%= report_dir %>/<%= report_ts %>/example-with-random-provider.yaml
  - name: example-user-managed-replication
    driver:
      root_module_directory: test/fixtures/examples/user-managed-replication
      variables:
        test_name: example-user-managed-replication
        secret: terribleS3cr3t
        replication_locations: '<%= harness_outputs['replication_locations'].to_s.gsub('"', '\"') %>'
    verifier:
      systems:
        - name: secrets
          backend: gcp
          profile_locations:
            - test/profiles/secrets
          reporter:
            - cli
            - documentation:<%= report_dir %>/<%= report_ts %>/example-user-managed-replication.txt
            - junit2:<%= report_dir %>/<%= report_ts %>/example-user-managed-replication.xml
            - yaml:<%= report_dir %>/<%= report_ts %>/example-user-managed-replication.yaml
  - name: example-user-managed-replication-accessors
    driver:
      root_module_directory: test/fixtures/examples/user-managed-replication-accessors
      variables:
        test_name: example-user-managed-replication-accessors
        accessors: '[\"serviceAccount:<%= harness_outputs['service_account_email'] %>\"]'
        secret: terribleS3cr3t
        replication_locations: '<%= harness_outputs['replication_locations'].to_s.gsub('"', '\"') %>'
    verifier:
      systems:
        - name: secrets
          backend: gcp
          profile_locations:
            - test/profiles/secrets
          reporter:
            - cli
            - documentation:<%= report_dir %>/<%= report_ts %>/example-user-managed-replication-accessors.txt
            - junit2:<%= report_dir %>/<%= report_ts %>/example-user-managed-replication-accessors.xml
            - yaml:<%= report_dir %>/<%= report_ts %>/example-user-managed-replication-accessors.yaml
  - name: example-user-managed-replication-with-keys
    driver:
      root_module_directory: test/fixtures/examples/user-managed-replication-with-keys
      variables:
        test_name: example-user-managed-replication-with-keys
        secret: terribleS3cr3t
        replication_locations: '<%= harness_outputs['replication_locations'].to_s.gsub('"', '\"') %>'
        replication_keys: '{<%= harness_outputs['replication_keys'].except('global').to_a.map{|pair| sprintf('%s=\"%s\"', pair[0], pair[1])}.join(',') %>}'
    verifier:
      systems:
        - name: secrets
          backend: gcp
          profile_locations:
            - test/profiles/secrets
          reporter:
            - cli
            - documentation:<%= report_dir %>/<%= report_ts %>/example-user-managed-replication-with-keys.txt
            - junit2:<%= report_dir %>/<%= report_ts %>/example-user-managed-replication-with-keys.xml
            - yaml:<%= report_dir %>/<%= report_ts %>/example-user-managed-replication-with-keys.yaml
  - name: example-empty-secret-value
    driver:
      root_module_directory: test/fixtures/examples/empty-secret-value
      variables:
        test_name: example-empty-secret-value
    verifier:
      systems:
        - name: secrets
          backend: gcp
          profile_locations:
            - test/profiles/secrets
          reporter:
            - cli
            - documentation:<%= report_dir %>/<%= report_ts %>/example-empty-secret-value.txt
            - junit2:<%= report_dir %>/<%= report_ts %>/example-empty-secret-value.xml
            - yaml:<%= report_dir %>/<%= report_ts %>/example-empty-secret-value.yaml
